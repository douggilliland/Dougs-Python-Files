"""
=============
pyCSVtoROM.py
=============

Convert a CSV into a VHDL ROM table.

==========
Background
==========

It is easy to make CSV files in EXCEL
Altera Quartus II can make tables into logic saving on RAM usage.

=====
Usage
=====

This program prompts for a path and file to select for input.
The output file is created in the same path with a .vhd output file name.

===
API
===

"""
from __future__ import print_function

from builtins import object
import pygtk
pygtk.require('2.0')

import gtk

import math

# Check for new pygtk: this is new class in PyGtk 2.4
if gtk.pygtk_version < (2,3,90):
	 print("PyGtk 2.3.90 or later required")
	 raise SystemExit

import csv
import string
import os
import sys

# Need to make this point to the common modules used in the two below imports
sys.path.append('C:\\Users\\Doug\\Documents\\GitHub\\lb-Python-Code\\dgCommonModules')
sys.path.append('C:\\HWTeam\\Utilities\\dgCommonModules')
sys.path.append('C:\\Users\\Doug\\Documents\\GitHub\\lb-Python-Code\\dgCommonModules')

from dgProgDefaults import *
from dgReadCSVtoList import *
defaultPath = '.'

from sys import argv

def errorDialog(errorString):
	"""
	Prints an error message as a dialog box
	"""
	message = gtk.MessageDialog(type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_OK)
	message.set_markup(errorString)
	message.run()		# Display the dialog box and hang around waiting for the "OK" button
	message.destroy()	# Takes down the dialog box
	return
	
class ControlClass(object):
	def theExecutive(self):
		"""
		:global lastPathFileName: The path and file name that was found by the browser.

		The code that calls the other code.
		This code uses the defaults library to handle the default path.
		This code uses the read CSV library to read in the CSV file.
		"""
		global defaultPath
		
		defaultParmsClass = HandleDefault()
		defaultParmsClass.initDefaults()
		defaultPath = defaultParmsClass.getKeyVal('DEFAULT_PATH')
		#print 'defaultPath',defaultPath

		myCSVFileReadClass = ReadCSVtoList()	# instantiate the class
		myCSVFileReadClass.setVerboseMode(True)	# turn on verbose mode until all is working 
		theInList = myCSVFileReadClass.findOpenReadCSV(defaultPath,'Select CSV File')	# read in CSV into list
		if theInList == []:
			return False
		fileToWrite = myCSVFileReadClass.getLastPathFileName()[0:-4] + '.vhd'
		#print 'fileToWrite',fileToWrite
		try:
			outFile = open(fileToWrite, 'wb')
		except IOError:
			errorDialog('ERROR - Cannot open the output file.\nIs the file already open?\nClose the file and return.')
			try:
				outFile = open(fileToWrite, 'wb')
			except IOError:
				errorDialog('ERROR - Tried again,  - Is the file already open?')
				exit()
		
		self.writeOutROMTable(outFile, theInList, myCSVFileReadClass.extractFilenameFromPathfilename(myCSVFileReadClass.getLastPathFileName()[0:-4]))
		
	def writeOutROMTable(self, outFilePtr, theList, tableName):
		"""
		:param outFilePtr: Points to the output file.
		:param theList: The list to write out.
		library ieee;
			use ieee.std_logic_1164.all;
			use ieee.numeric_std.all;
			use ieee.std_logic_unsigned.all;

		ENTITY CharRom IS

			PORT
			(
				address : in std_logic_vector(10 downto 0);
				q : out std_logic_vector(7 downto 0)
			);
		END CharRom;

		architecture behavior of CharRom is
		type romtable is array (0 to 2047) of std_logic_vector(7 downto 0);
		constant romdata : romtable :=
		(
		x"5A",x"7E",x"5A"
		...
		);
		begin
		process (address)
		begin
		q <= romdata (to_integer(unsigned(address)));
		end process;
		end behavior;
		"""
		# print ("Table is ")
		# print (len(theList))
		# print (" entries long")
		tableLen=len(theList)
		tableLenMinus1=tableLen-1
		addressBits = int(math.log(tableLen,2))
		# print (addressBits)
		
		# x = int("deadbeef", 16)
		
		maxVal = 0
		for row in theList:
			if int(row[0], 16) > maxVal:
				maxVal = int(row[0], 16)
		# print(maxVal)
		dataBits = int(math.log(maxVal,2))
		# print(dataBits)
		outFilePtr.write('-- ---------------------------------------\n')
		outFilePtr.write('-- Table generated by pyCSVtoROM.py script\n')
		outFilePtr.write('-- MIT v3 license\n')
		outFilePtr.write('-- Written by Land Boards, LLC, 2019\n')
		outFilePtr.write('-- ---------------------------------------\n')
		outFilePtr.write('\n')
		outFilePtr.write('library ieee;\n')
		outFilePtr.write('\tuse ieee.std_logic_1164.all;\n')
		outFilePtr.write('\tuse ieee.numeric_std.all;\n')
		outFilePtr.write('\tuse ieee.std_logic_unsigned.all;\n\n')
		# tableName
		outFilePtr.write('ENTITY ')
		outFilePtr.write(tableName)
		outFilePtr.write(' IS\n')
		outFilePtr.write('\tPORT\n\t(\n')
		outFilePtr.write('\t\taddress : in std_logic_vector(')
		outFilePtr.write(str(addressBits-1))
		outFilePtr.write(' downto 0);\n')
		outFilePtr.write('\t\tq : out std_logic_vector(')
		outFilePtr.write(str(dataBits))
		outFilePtr.write(' downto 0)\n')
		outFilePtr.write('\t);\nEND ')
		outFilePtr.write(tableName)
		outFilePtr.write(';\n\n')
		outFilePtr.write('architecture behavior of ')
		outFilePtr.write(tableName)
		outFilePtr.write(' is\n')
		outFilePtr.write('type romtable is array (0 to ')
		outFilePtr.write(str(tableLenMinus1))
		outFilePtr.write(') of std_logic_vector(')
		outFilePtr.write(str(dataBits))
		outFilePtr.write(' downto 0);\n')
		outFilePtr.write('constant romdata : romtable :=\n(\n')
		firstRow = True
		rowCount = 1
		first = True
		count=0
		for row in theList:
			if first:
				outFilePtr.write("x\"")
				first = False
			else:
				if rowCount == 1:
					outFilePtr.write("x\"")
				else:
					outFilePtr.write("x\"")
			outFilePtr.write(row[0])
			outFilePtr.write("\"")
			rowCount += 1
			count += 1
			if count<len(theList):
				outFilePtr.write(",")
			if rowCount == 17:
				outFilePtr.write("\n")
				rowCount = 1
		if rowCount == 1:
			outFilePtr.write(");\n")
		else:
			outFilePtr.write("\n);\n")

class UIManager(object):
	"""The UI manager
	"""
	interface = """
	<ui>
		<menubar name="MenuBar">
			<menu action="File">
				<menuitem action="Open"/>
				<menuitem action="Quit"/>
			</menu>
			<menu action="Help">
				<menuitem action="About"/>
			</menu>
		</menubar>
	</ui>
	"""

	def __init__(self):
		"""Initialize the class
		"""
		# Create the top level window
		window = gtk.Window()
		window.connect('destroy', lambda w: gtk.main_quit())
		window.set_default_size(200, 200)
		
		vbox = gtk.VBox()
		
		# Create a UIManager instance
		uimanager = gtk.UIManager()

		# Add the accelerator group to the toplevel window
		accelgroup = uimanager.get_accel_group()
		window.add_accel_group(accelgroup)
		window.set_title('pyCSVtoROM - Kicad Parts List creation program')

		# Create an ActionGroup
		actiongroup =	gtk.ActionGroup("pyCSVtoROM")
		self.actiongroup = actiongroup

		# Create actions
		self.actiongroup.add_actions([
									("Open", gtk.STOCK_OPEN, "_Open", None, "Open an Existing Document", self.openIF),
									("Quit", gtk.STOCK_QUIT, "_Quit", None, "Quit the Application", self.quit_application),
									("File", None, "_File"),
									("Help", None, "_Help"),
									("About", None, "_About", None, "About pyCSVtoROM", self.about_pyCSVtoROM),
									])
		uimanager.insert_action_group(self.actiongroup, 0)
		uimanager.add_ui_from_string(self.interface)
		
		menubar = uimanager.get_widget("/MenuBar")
		vbox.pack_start(menubar, False)
		
		window.connect("destroy", lambda w: gtk.main_quit())
		
		window.add(vbox)
		window.show_all()

	def openIF(self, b):
		"""Open the interface by calling the control class
		"""
		myControl = ControlClass()
		myControl.theExecutive()

		message = gtk.MessageDialog(type=gtk.MESSAGE_INFO, buttons=gtk.BUTTONS_OK)
		message.set_markup("Conversion Complete")
		message.run()		# Display the dialog box and hang around waiting for the "OK" button
		message.destroy()	# Takes down the dialog box
		return

	def about_pyCSVtoROM(self, b):
		"""The about dialog
		"""
		message = gtk.MessageDialog(type=gtk.MESSAGE_INFO, buttons=gtk.BUTTONS_OK)
		message.set_markup("About pyCSVtoROM\n(c) 2014 - Doug Gilliland\nAAC - All rights reserved\npyCSVtoROM Create a mediawiki table frm a CV file")
		message.run()
		message.destroy()
		return

	def quit_application(self, widget):
		gtk.main_quit()

if __name__ == '__main__':
	ba = UIManager()
	gtk.main()
